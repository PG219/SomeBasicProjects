<!DOCTYPE html>
<html>
<head>
    <title>Connect 4</title>
    <link rel="stylesheet" href="style.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap" rel="stylesheet">
</head>
<body>
    <h1 id="main-title">Code4u</h1>
    <div id="board">
        <div class = "box">
            
        </div>
    </div>
    <div id="rules">
        <h2 id="rules-heading">The Rules</h2>
        <ul id = "rules-list">
            <li>Challenge a friend to a thrilling match of Connect 4!</li>
            <li>
              Take turns dropping your red or yellow discs into the grid, aiming to
              line up four in a row to claim victory.
            </li>
            <li>
              Keep an eye on your opponent’s strategy—if they’re close to winning,
              block their path with your disc!
            </li>
    
        </ul>
    </div>
    <script src="index.js" />
</body>
</html>


<!-- 1 rem = size by browsers(16px)
 1% size of parent tag
 1em is relative to parent
 1vp/vh = with respect to screen

-->



.ubuntu-light {
    font-family: "Ubuntu", sans-serif;
    font-weight: 300;
    font-style: normal;
  }
  
  .ubuntu-regular {
    font-family: "Ubuntu", sans-serif;
    font-weight: 400;
    font-style: normal;
  }
  
  .ubuntu-medium {
    font-family: "Ubuntu", sans-serif;
    font-weight: 500;
    font-style: normal;
  }
  
  .ubuntu-bold {
    font-family: "Ubuntu", sans-serif;
    font-weight: 700;
    font-style: normal;
  }
  
  .ubuntu-light-italic {
    font-family: "Ubuntu", sans-serif;
    font-weight: 300;
    font-style: italic;
  }
  
  .ubuntu-regular-italic {
    font-family: "Ubuntu", sans-serif;
    font-weight: 400;
    font-style: italic;
  }
  
  .ubuntu-medium-italic {
    font-family: "Ubuntu", sans-serif;
    font-weight: 500;
    font-style: italic;
  }
  
  .ubuntu-bold-italic {
    font-family: "Ubuntu", sans-serif;
    font-weight: 700;
    font-style: italic;
  }
  








body {
    background-color: rgba(4, 7, 75, 0);
    color: rgb(1, 9, 24);
    font-family: Ubuntu;
}

h1 {
    font-size: x-large;
}

#main-title {
    text-align: center;
}   

#rules {
    margin-left : 1em
}

#board {

    width: 75vw;
    height: 75vw;
    max-width: 600px;
    max-height:600px;
    background-color: antiquewhite;
    margin: auto;
    display: grid;
    grid-template-columns: repeat(7, 1fr); /* fr is a type of proportion which we have repeated 7 times*/
    grid-template-rows: repeat(7,1fr);
}

.box{
    width: 100%;
    height: 100%;
    border: 1px black solid;
}

.coin {
    width: 80%;
    height: 80%;
    margin: 10%;
    border-radius: 50%;
    border: 5px #273040 solid;
    box-sizing: border-box;
}


.red{
    background-color: red;
}

.yellow{
    background-color: yellow;
}


const board = document.getElementById('board');
let pieces = [];
let player = 'red';

for (let i = 0; i < 7; i++) {
  let row = [];
  for (let j = 0; j < 7; j++) {
    const box = document.createElement('div');
    box.className = 'box';
    box.dataset.row = i;
    box.dataset.col = j;
    box.onclick = clicked;
    board.appendChild(box);
    row.push(box);
  }
  pieces.push(row);
}

function clicked(event) {
  const coin = document.createElement('div');
  coin.className = 'coin ' + player;
  coin.dataset.col = event.target.dataset.col;

  const col = event.target.dataset.col;
  var isCoinPlaced = false;

  for (let i = 6; i >= 0; i--) {
    if (pieces[i][col].querySelector('.coin') == null) {
      pieces[i][col].appendChild(coin);
      isCoinPlaced = true;
      break;
    }
  }

  if (isCoinPlaced) {
    if (checkWin()) {
      alert(player + ' wins!');
    }
    swapPlayer();
  }
}

function swapPlayer() {
  if (player == 'red') {
    player = 'yellow';
  } else {
    player = 'red';
  }
}

moves = [
  [-1, 0],
  [0, 1],
  [-1, 1],
  [-1, -1],
]; // up, right, diag ur, diag ul

function checkWin() {
  for (let k = 0; k < 4; k++) {
    // Iterating throguh all moves
    for (let i = 0; i < 7; i++) {
      // Iterate through all rows
      for (let j = 0; j < 7; j++) {
        // Iterate throguh all columns
        if (checkPiece(i, j, moves[k][0], moves[k][1])) {
          return true;
        }
      }
    }
  }
  return false;
}

function checkPiece(row, col, change_row, change_col) {
  var steps = 0;
  const to_check = pieces[row][col].querySelector('.' + player);
  while (row >= 0 && col >= 0 && row <= 6 && col <= 6 && to_check != null) {
    if (pieces[row][col].querySelector('.' + player) != null) {
      steps++;
    } else {
      break;
    }
    row += change_row;
    col += change_col;
  }
  if (steps >= 4) {
    return true;
  }

  return false;
}
